from pybricks.hubs import InventorHub
from pybricks.pupdevices import Motor, ColorSensor, UltrasonicSensor
from pybricks.parameters import Button, Color, Direction, Port, Side, Stop
from pybricks.robotics import DriveBase
from pybricks.tools import wait, StopWatch
hub = InventorHub()
pen = Motor(Port.A)
paper = Motor(Port.C)
head = Motor(Port.F)
sensor = ColorSensor(Port.E)
text = "Hello"
write_dir = "LTR" # Left to right 
font_size = 7 
# Pen Move Left = -
# Pen Move Right = +
# In this code, movement represents the amount the motor should move based on the font size
def pen_up():
    pen.run_time(-600 , 1000)
    global pen_state
    pen_state = 0
def pen_down():
    pen.run_time(600 , 1000)
    global pen_state
    pen_state = 1
def init():
    print("Initializing...")
    hub.light.off()
    hub.light.on(color=Color.YELLOW)
    hub.speaker.volume(30)
    head.run_time(-600 , 2000)
    hub.light.on(color=Color.GREEN)
    hub.speaker.play_notes(["B4/4", "E6/6"] , tempo=160)
    global pen_state
    pen_state = 0
    while sensor.color() != Color.WHITE:
          paper.run(2000)
    wait(200)
    paper.hold()
    print("Done")
init()
wait(100)
print('Printing...')
class write:
  def F():
    pen_down()
    movement = float(20) * float(font_size)
    head.run_angle(500 , movement)
    pen_up()
    head.run_angle(500 , -movement)
    pen_down()
    paper.run_angle(200 , movement / 2 )
    head.run_angle(500 , movement)
    pen_up()
    head.run_angle(500 , -movement)
    pen_down()
    paper.run_angle(200 , movement / 2 )
    pen_up()
    head.run_angle(500 , 20 + movement)
    paper.run_angle(200 , movement)
  def L():
    pen_down()
    movement = float(20) * float(font_size)
    paper.run_angle(200 , -movement)
    head.run_angle(500 , movement)
    pen_up()
    head.run_angle(500 , 20)
    paper.run_angle(200 , movement)
  def space():
    movement = float(20) * float(font_size)
    head.run_angle(500 , movmeent)
  def U():
    pen_down()
    movement = float(20) * float(font_size)
    paper.run_angle(200 , -movement)
    head.run_angle(500 , movement)
    paper.run_angle(200 , movement)
    pen_up()
    head.run_angle(500 , 20)
  def G():
    movement = float(20) * float(font_size)
    # movementhead = float(20) * float(font_size)
    head.run_angle(500 , movement)
    pen_down()
    head.run_angle(500 , -movement)
    paper.run_angle(200 , -movement)
    head.run_angle(500 , movement)
    paper.run_angle(200 , movement / 2 )
    head.run_angle(200 , -movement / 2)
    pen_up()
    head.run_angle(500 , 20)
    paper.run_angle(200 , -movement)
  def C():
    movement = float(20) * float(font_size)
    # movementhead = float(20) * float(font_size)
    head.run_angle(500 , movement)
    pen_down()
    head.run_angle(500 , -movement)
    paper.run_angle(200 , -movement)
    head.run_angle(500 , movement)
    pen_up()
    paper.run_angle(200 , -movement)
    head.run_angle(500 , 20)
  def M():
    pen_down()
    movement = float(12) * float(font_size)
    movementm = float(movement) * float(1.2)
    time = float(20) * float(font_size)
    paper.run_angle(200 , movement)
    head.run(movementm)
    paper.run(-movementm)
    wait(1000)
    paper.stop()
    head.stop()
    head.run(movementm)
    paper.run(movementm)
    wait(1000)
    paper.stop()
    head.stop()
    paper.run_angle(200 , -movement)
    pen_up()
  def N():
    movement = float(12) * float(font_size)
    movementm = float(movement) * float(1.2)
    pen_down()
    paper.run_angle(200 , movement)
    head.run(movementm)
    paper.run(-movementm)
    wait(1200)
    paper.stop()
    head.stop()
    paper.run_angle(200 , -movement)
    pen_up()
  def H():
    pen_down()
    movement = float(20) * float(font_size)
    halfdistence = float(movement) / 2
    # movementhead = float(20) * float(font_size)
    paper.run_angle(200 , -movement)
    pen_up()
    paper.run_angle(200 , halfdistence)
    pen_down()
    head.run_angle(500 , movement)
    paper.run_angle(200 , halfdistence)
    paper.run_angle(200 , movement)
    pen_up()
    head.run_angle(500 , 20)
    # paper.run_angle(200 , -movement)
  def E():
    pen_down()
    movement = float(20) * float(font_size)
#    movementhead = float(20) * float(font_size)
    thirdmovement = float(movement / 3)
    head.run_angle(500 , movement)
    pen_up()
    head.run_angle(500 , -movement)
    pen_down()
    paper.run_angle(200 , thirdmovement)
    head.run_angle(500 , movement)
    pen_up()
    head.run_angle(500 , -movement)
    pen_down()
    paper.run_angle(200 , thirdmovement)
    head.run_angle(500 , movement)
    pen_up()
    head.run_angle(500 , 20)
    paper.run_angle(200 , -movement)
  def O():
    movement = float(20) * float(font_size)
#    movementhead = float(20) * float(font_size)
    head.run_angle(300 , movement)
    pen_down()
    head.run_angle(300 , -movement)
    paper.run_angle(200 , -movement)
    head.run_angle(300 , movement)
    paper.run_angle(200 , movement)
    pen_up()
    head.run_angle(500 , 20)
  def I():
    movement = float(20) * float(font_size)
#    movementhead = float(20) * float(font_size)
    movementhalf = movementhead / 2
    pen_down()
    head.run_angle(500 , movement)
    pen_up()
    head.run_angle(500 , -movementhalf)
    pen_down()
    paper.run_angle(200 , movement)
    head.run_angle(500 , -movementhalf)
    head.run_angle(500 , movement)
    pen_up()
    head.run_angle(500 , 20)
    paper.run_angle(200 , -movement)
  def J():
    pen_down()
    movement = float(20) * float(font_size)
    paper.run_angle(200 , -movement)
    head.run_angle(500 , -movement)
    pen_up()
    head.run_angle(500 , movement + 20)
    # head.run_angle(500 , 20)
    paper.run_angle(200 , -movement)
  def F():
    movement = float(20) * float(font_size)
    head.run_angle(300 , movement)
    pen_down()
    head.run_angle(300 , -movement)
    paper.run_angle(300 , movement / 2)
    pen_up()
    head.run_angle(300 , movement)
    pen_down()
    head.run_angle(300 , -movement)
    paper.run_angle(300 , movement / 2)
    pen_up()
    head.run_angle(500 , 20)
    paper.run_angle(200 , -movement)
  def T():
    movement = float(20) * float(font_size)
    pen_down()
    head.run_angle(500 , movement)
    pen_up()
    head.run_angle(500 , -movement / 2)
    pen_down()
    paper.run_angle(200 , movement)
    pen_up()
    head.run_angle(500 , 20 + movement / 2 )
    paper.run_angle(200 , movement)

for letter in text:
    attribute_name = 'write.' + letter
    attribute = getattr(write, letter, None)
    if letter == " ":
        write.space()
    if callable(attribute): 
        print(f"Printing letter {letter}")
        attribute()

